datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    
    organizations   OrganizationOnUser[]
    createdPreznts  Preznt[]             @relation("CreatedPreznts")
    redeemedPreznts PrezntOnUser[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model OrganizationOnUser {
    // this is needed for relations :D
    id              String             @id @unique @default(cuid())

    userId          String
    user            User               @relation(fields: [userId], references: [id])
    organizationId  String
    organization    Organization       @relation(fields: [organizationId], references: [id])

    status     OrganizationStatus
    attributes UserAttribute[]

    @@unique([userId, organizationId])
}

model Organization {
    id        String               @id @default(cuid())
    headerUrl String
    slug      String               @unique
    joinCode  String               @unique
    private   Boolean
    name      String
    users     OrganizationOnUser[]
    preznts   Preznt[]
}

model UserAttribute {
    name         String
    value        Float
    userId       String
    user         OrganizationOnUser? @relation(fields: [userId], references: [id])

    @@unique([userId, name])
}

model UserAttributeAction {
    id           String         @id @default(cuid())
    action       KeyValueAction
    attribute    String
    value        Float
    defaultValue Float

    prezntId String
    preznt   Preznt @relation(fields: [prezntId], references: [id])
}

model Preznt {
    id        String                @id @default(cuid())
    name      String
    // will make it show up on the calendar
    main      Boolean
    expires   DateTime
    actions   UserAttributeAction[]
    allowJoin Boolean
    code      String

    createdAt DateTime @default(now())
    creatorId String
    creator   User     @relation(name: "CreatedPreznts", fields: [creatorId], references: [id])

    organizationId String
    organization   Organization   @relation(fields: [organizationId], references: [id])
    redeemedBy     PrezntOnUser[]

    @@unique([code, organizationId])
}

model PrezntOnUser {
    prezntId   String
    preznt     Preznt   @relation(fields: [prezntId], references: [id])
    userId     String
    user       User     @relation(fields: [userId], references: [id])
    redeemedAt DateTime @default(now())

    @@unique([prezntId, userId])
}

enum KeyValueAction {
    INCREMENT
    DECREMENT
    SET
}

enum OrganizationStatus {
    OWNER
    ADMIN
    MEMBER
}

